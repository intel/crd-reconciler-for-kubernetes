apiVersion: batch/v1
kind: Job
metadata:
  name: "{{.ObjectMeta.Name}}"
  namespace: "{{.ObjectMeta.Namespace}}"
  labels:
    run: "{{.ObjectMeta.Name}}"
    type: model-training
    jobid: "{{.Spec.JobID}}"
    tenantid: "{{.Spec.TenantID}}"
  ownerReferences:
  - apiVersion: {{.APIVersion}}
    kind: {{.Kind}}
    name: {{.Name}}
    uid: {{.UID}}
    controller: {{.Controller}}
    blockOwnerDeletion: {{.BlockOwnerDeletion}}
spec:
  parallelism: 1
  completions: 1
  backOffLimit: 1
  template:
    metadata:
      labels:
        run: "{{.ObjectMeta.Name}}"
        type: model-training
        jobid: "{{.Spec.JobID}}"
        tenantid: "{{.Spec.TenantID}}"
    spec:
      restartPolicy: Never
      volumes:
      - name: ssh-key-volume
        secret:
          secretName: ssh-keys
      - name: aws-key-volume
        secret:
          secretName: aws-keys
      - name: job-results
      - name: code
      - name: datasets-symlink
      - name: datasets
      - name: stock-dataset
        hostPath:
          path: /var/neon/stock-datasets
      imagePullSecrets:
        - name: dockerhub
      containers:
      - name: model
        image: "{{.Spec.ContainerSpec.Image}}"
        imagePullPolicy: Always
        resources:
          # TODO(niklas): add support for resource limits.
          requests:
{{ range $resource, $request := .Spec.ResourceSpec.Requests }}
            "{{ $resource }}": "{{ ResourceString $request }}"
{{ end }}

          # This is necessary because the alpha GPU support in Kubernetes
          # does not correctly assign a device to the container unless
          # present in limits.
          #
          # TODO(connor): make this generic again when the behavior is fixed
          #               upstream.
{{ $gpu_request := index .Spec.ResourceSpec.Requests "alpha.kubernetes.io/nvidia-gpu" }}
{{if $gpu_request }}
          limits:
            "alpha.kubernetes.io/nvidia-gpu": "{{ ResourceString $gpu_request }}"
{{end}}
        volumeMounts:
        - name: code
          mountPath: /code/
        - name: job-results
          mountPath: /output/
        - name: datasets
          mountPath: /datasets
        - name: stock-dataset
          mountPath: /var/neon/datasets
        - name: datasets-symlink
          mountPath: /datasets-symlink
        env:
        - name: CLOUD_API_IP
          value: "{{ .Spec.MetricsURL }}"
        - name: STOCKDATA_DIR
          value: "/var/neon/datasets"
        - name: DATASET_WORKER_PATH
          value: "/datasets"
        - name: CMD
          value: "{{ .Spec.ContainerSpec.Command }}"
      - name: model-sidecar
        image: "{{ .Spec.ContainerSpec.SidecarImage }}"
        imagePullPolicy: Always
        resources:
          limits:
            cpu: 200m
            memory: 400Mi
          requests:
            cpu: 200m
            memory: 400Mi
        volumeMounts:
        - name: code
          mountPath: /code/
        - name: job-results
          mountPath: /output/
        - name: ssh-key-volume
          mountPath: /root/ssh-keys/
        - name: aws-key-volume
          mountPath: /root/.aws/
        - name: datasets
          mountPath: /datasets
        - name: stock-dataset
          mountPath: /var/neon/datasets
        - name: datasets-symlink
          mountPath: /datasets-symlink
        env:
          - name: S3_INPUT
            value: {{ printf "s3://%s" .Spec.SandboxS3URLPath}}
{{ range .Spec.Repositories }}
          - name: {{ printf "%s_REPO_LOCATION" .Name }}
            value: {{ .URL  }}
          - name: {{ printf "%s_COMMIT" .Name }}
            value: {{ .Commit  }}
{{ end }}
          - name: DATASET_PATH
            value: "{{ .Spec.VolumeS3URLs }}"
          - name: DATASET_WORKER_PATH
            value: "/datasets"
          - name: STOCKDATA_DIR
            value: "/var/neon/datasets"
          - name: CONTINUATION_S3_URL
            value: "{{ .Spec.ContinuationS3URL }}"
      - name: nfl
        image: "{{ .Spec.ContainerSpec.NFLImage }}"
        imagePullPolicy: Always
        resources:
          limits:
            cpu: 200m
            memory: 100Mi
          requests:
            cpu: 200m
            memory: 100Mi
        volumeMounts:
        - name: code
          mountPath: /code/
        - name: job-results
          mountPath: {{ printf "/output/%s" .Spec.SandboxS3URLPath }}
        - name: aws-key-volume
          mountPath: /root/.aws/
        env:
          - name: OUTPUT_DIR
            value: {{ printf "/output/%s" .Spec.SandboxS3URLPath}}
          - name: RESULTS_BASE_DIR
            value: /output/
          - name: RUNNING_IN_CONTAINER
            value: "True"
